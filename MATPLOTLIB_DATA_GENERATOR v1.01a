from yahoofinancials import YahooFinancials
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from sklearn import linear_model
import random
import numpy
from sklearn.metrics import mean_squared_error, r2_score


daily_high = []
daily_low = []
dates = []

def data_generator(ticker):
    yahoo_financials = YahooFinancials(ticker)
    info = yahoo_financials.get_historical_price_data('2018-01-03','2019-07-01','daily')
    for val in info[ticker]['prices']:
        daily_high.append(round(val['high'],2))
        daily_low.append(round(val['low'],2))
        dates.append(val['formatted_date'])

def fix1Darray(x):
    return numpy.array(x).reshape(-1,1)

def bestfit(x,y):
    x_avg = sum(x)/len(x)
    y_avg = sum(y)/len(y)
    n = len(x)

    top = sum([xi*yi for xi,yi in zip(x,y)]) - n*x_avg * y_avg
    bot = sum([xi**2 for xi in x]) - n*x_avg**2

    b = top/bot
    a = y_avg - b * x_avg

    #print('best fit line: \ny = {:.2f} + {:.2f}x'.format(a,b))

    return a,b

def trainer():
    x_train = daily_high[:]
    y_train = []
    for i in range(1,len(dates)+1):
        y_train.append(i)

    regr = linear_model.LinearRegression()
    x_train = fix1Darray(x_train)
    y_train = fix1Darray(y_train)
    regr.fit(y_train,x_train)
    a,b = bestfit(y_train,x_train)
    plt.scatter(y_train,x_train)
    yfit = [a+b * xi for xi in x_train]
    plt.plot(x_train,yfit)
    plt.show()



def grapher(high,low,days):
    years = mdates.YearLocator()
    months = mdates.MonthLocator()
    years_fmt = mdates.DateFormatter('%Y')

    fig,ax = plt.subplots()
    ax.plot(dates,daily_high)

    ax.xaxis.set_major_locator(years)
    ax.xaxis.set_major_formatter(years_fmt)
    ax.xaxis.set_minor_locator(months)

    ax.set_xlim(days[0],days[len(days)-1])

    ax.format_xdata = mdates.DateFormatter('%Y-%m-%d')
    ax.format_ydata = lambda x: '$%1.2f' % x
    ax.grid(True)

    fig.autofmt_xdate()

    plt.show()

ticker = input('Enter ticker of interest:').upper() #default 'AAPL'
if len(ticker) <= 1:
    ticker = 'AAPL'

data_generator(ticker)
trainer()
grapher(daily_high[::2],daily_low[::2],dates[::2])
