from yahoofinancials import YahooFinancials
import matplotlib.pyplot as plt
from sklearn import linear_model
import numpy
from sklearn.metrics import mean_squared_error, r2_score


daily_high = []
daily_low = []
dates = []
test_data = []
test_dates = []

def data_generator(ticker):
    yahoo_financials = YahooFinancials(ticker)
    info = yahoo_financials.get_historical_price_data('2015-01-03','2019-01-03','daily')
    test_info = yahoo_financials.get_historical_price_data('2019-01-04','2019-07-03','daily')
    for val in info[ticker]['prices']:
        daily_high.append(round(val['high'],2))
        daily_low.append(round(val['low'],2))
        dates.append(val['formatted_date'])
    for val in test_info[ticker]['prices']:
        test_data.append(round(val['high'],2))
        test_dates.append(val['formatted_date'])

def fix1Darray(x):                      #function to make the array 1d so we can process
    return numpy.array(x).reshape(-1,1)

def bestfit(x,y):
    x_avg = sum(x)/len(x)
    y_avg = sum(y)/len(y)
    n = len(x)

    top = sum([xi*yi for xi,yi in zip(x,y)]) - n*x_avg * y_avg
    bot = sum([xi**2 for xi in x]) - n*x_avg**2

    b = top/bot
    a = y_avg - b * x_avg

    return a,b

def trainer():
    y_train = daily_high[:]
    x_train = []
    for i in range(1,len(dates)+1):
        x_train.append(i)

    regr = linear_model.LinearRegression()
    x_train = fix1Darray(x_train)
    y_train = fix1Darray(y_train)
    regr.fit(x_train,y_train)
    a,b = bestfit(x_train,y_train)
    plt.scatter(x_train[::4],y_train[::4])  #too many points made the graph look cluttered
    yfit = [a+b * xi for xi in x_train]

    plt.plot(x_train,yfit)
    plt.title('Historical stock data for ' + str(ticker) + 'test data using 2015-01-03 to 2019-01-03')
    plt.xlabel('Day')
    plt.ylabel('Price ($USD)')
    plt.show()



ticker = input('Enter ticker of interest:').upper() #default 'AAPL'
if len(ticker) <= 1:
    ticker = 'AAPL'

data_generator(ticker)
trainer()
