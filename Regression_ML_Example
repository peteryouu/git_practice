import random
import matplotlib.pyplot as pyplot
from sklearn import linear_model
import numpy
from sklearn.metrics import mean_squared_error, r2_score

def generate_sample_data(coeff, num_samples = 200, y_spread = 30.0):
    data = []
    for x in range(num_samples):
        y = round(coeff * x + y_spread * (random.random() - 0.5),2)
        data.append((x,y))
    return data

def split_training_test(data, proportion_train = 0.5):
    indices = random.sample(range(len(data)),int(proportion_train * len(data)))
    train = []
    test = []
    for i in range(len(data)):
        if i in indices:
            train.append(data[i])
        else:
            test.append(data[i])
    return (train,test)
def fix1Darray(x):
    return numpy.array(x).reshape(-1,1)


coeff = random.uniform(1, 2)
data = generate_sample_data(coeff)
(data_train,data_test) = split_training_test(data)
x_train = [p[0] for p in data_train]
y_train = [p[1] for p in data_train]

regr = linear_model.LinearRegression()
x_train = fix1Darray(x_train)
regr.fit(x_train, y_train)

x_test = [p[0] for p in data_test]
x_test = fix1Darray(x_test)
y_test = [p[1] for p in data_test]
y_pred = regr.predict(x_test)

pyplot.scatter(x_test, y_test)
pyplot.plot(x_test, y_pred)
pyplot.show()

mse = mean_squared_error(y_test, y_pred)
r2score = r2_score(y_test, y_pred)
print('mean square error: {:.2f}'.format(mse))
print('r2 score: {:.2f}'.format(r2score))

print('Estimated coeff ', regr.coef_)
print('estimated int ', regr.intercept_)
